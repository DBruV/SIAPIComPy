
# Important Notice:
# Install "Python for Window Extensions" pypiwin32 package before running this sample:
#  * install through pip: run the command "pip install pypiwin32", or
#  * download the package from https://pypi.python.org/pypi/pypiwin32
# The "pip.exe" file is located in the folder "<Python_install_folder>\Scripts", e.g. "C:\Program Files (x86)\Python36-32\Scripts".
#
# The file "SIAPIComPy.py" is generated by the pypiwin32 package. You can use this
# existing one, or create one by yourself. The instructions to create it are given below.
# 1. Open "Command Prompt"
# 2. Run "<Python_install_folder>\Lib\site-packages\win32com\client\makepy.py"
# 3. Select "SIDRA INTERSECTION 9.1 API (9.1)" in the popup "Select Library" window, click "OK"
# 4. Copy the generated "F1DF19D9-2999-4A13-9436-4CE374012F6Ax0x9x1.py" file to the folder of
#    this script file and rename it to "SIAPIComPy.py".

import win32com.client as w32c
import pythoncom
from enum import Enum
import SIAPIComPy

MAX_MC_COUNT = 12
MAX_LEG_COUNT = 8

class MovTurnNames(Enum):
    U = 0
    L3 = 1
    L2 = 2
    L1 = 3
    T1 = 4
    R1 = 5
    R2 = 6
    R3 = 7

class LegDirections(Enum):
    South = 0
    SouthEast = 1
    East = 2
    NorthEast = 3
    North = 4
    NorthWest = 5
    West = 6
    SouthWest = 7

switcherDiagStatus = {
    1: "Processed",
    2: "Not Processed",
    3: "Input Warning",
    4: "Processing Warning",
    5: "Error"
}

class PySIAPI:
    def __init__(self):
        pythoncom.CoInitialize()
        self.siapi = SIAPIComPy.ISIAPI(w32c.Dispatch('SIDRASolutions.SI.API.SIAPI'))
        # '{D92122F2-74F7-4A2B-953E-B75CF1B2738D}' is the CLSID of SI-9.1 SIAPI class.
        # Although we could use the ProgID 'SIDRASolutions.SI.API.SIAPI' instead of the CLSID here, 
        # the actual class of the ProgID is changed if another major or minor version of SIDRA INTERSECTION is installed.
        # For example, if we install SI-9.0 after SI-9.1, this ProgID will point to the SI-9.0 SIAPI class.
        # This will cause problems in a program that uses SI-9.1 API.
    
    def __ReadIntersectionOutput(self, site, outputset):
        print()
        speedUnitsStr = "km/h"
        
        outputSiteVeh = SIAPIComPy.ISIAPIOutputSiteVehicle(outputset.OutputSiteVehicle)
        print("Vehicles Travel Speed: {0:0.1f} {1}".format(outputSiteVeh.Travel_speed, speedUnitsStr))
        print("Vehicles Demand Flows (Total): {0:0.0f} veh/h".format(outputSiteVeh.Flow_total))
        # ...

        outputSitePed = SIAPIComPy.ISIAPIOutputSitePedestrian(outputset.OutputSitePedestrian)
        if outputSitePed.Demand_flow_total > 0:
            # this Site has Pedestrians
            print("Pedestrians Travel Speed: {0:0.1f} {1}".format(outputSitePed.Travel_speed, speedUnitsStr))
            print("Pedestrians Demand Flows (Total): {0:0.0f} veh/h".format(outputSitePed.Demand_flow_total))
            # ...

        outputSitePerson = SIAPIComPy.ISIAPIOutputSitePerson(outputset.OutputSitePerson)
        print("Persons Travel Speed: {0:0.1f} {1}".format(outputSitePerson.Travel_speed, speedUnitsStr))
        print("Persons Demand Flows (Total): {0:0.0f} veh/h".format(outputSitePerson.Demand_flow_total))
        # ...


    def __ReadMovementOutput(self, site, outputset):
        print()
        
        movVehODs = SIAPIComPy.ISIAPIMovement_vehicle_ods(site.MovementVehicleODs)
        outputLegs = SIAPIComPy.ISIAPIOutputLegs(outputset.OutputLegs)
        outputMovVehODs = SIAPIComPy.ISIAPIOutputMovementVehicleODs(outputset.OutputMovementVehicleODs)
        
        minODDesignation = 0
        maxODDesignation = MAX_LEG_COUNT - 1

        if site.DriveOnLeft:
            minODDesignation = 1
            maxODDesignation = MAX_LEG_COUNT

        for intLeg in range(0, MAX_LEG_COUNT):
            outputLegDispatchObj = outputLegs.Item(intLeg)
            if (outputLegDispatchObj is None):
                continue
            
            outputLeg = SIAPIComPy.ISIAPIOutputLeg(outputLegDispatchObj)
            print("{0} Leg Deg Satn = {1:0.3f} v/c, Level of Service = {2}, 95% BACK OF QUEUE ={3:0.0f}".format(
                LegDirections(intLeg).name, outputLeg.Deg_satn, outputLeg.Level_of_service, outputLeg.Queue_dist_maxback_percentile))

            for intODDesignation in range(minODDesignation, maxODDesignation + 1):
                if (intODDesignation== 0 or intODDesignation == MAX_LEG_COUNT):
                    intDestination = intLeg
                else:
                    intDestination = intLeg - intODDesignation

                if (intDestination < 0):
                    intDestination += MAX_LEG_COUNT

                outputMovODDispatchObj = outputMovVehODs.Item(intLeg, intDestination)
                if (outputMovODDispatchObj is None):
                    continue

                outputMovOD = SIAPIComPy.ISIAPIOutputMovementVehicleOD(outputMovODDispatchObj)
                movOD = SIAPIComPy.ISIAPIMovement_vehicle_od(movVehODs.Item(intLeg, intDestination)) # get the vehicle OD Movement input data

                if (intODDesignation == MAX_LEG_COUNT):
                    movTurnName = MovTurnNames(0).name
                else:
                    movTurnName = MovTurnNames(intODDesignation).name

                print("Mov ID:{0}, Turn:{1}, Demand Flows Total:{2:0.0f} veh/h, HV:{3:0.1f}%, Deg. Satn:{4:0.3f} v/c, Worst Mov. ={5}".format(
                    movOD.Display_od_id, movTurnName, outputMovOD.Flow_total, outputMovOD.Flow_HV_pct, outputMovOD.Deg_satn, outputLeg.Delay_control_total))

    def __ReadLaneOutput(self, site, outputset):
        print()
        
        outputLegs = SIAPIComPy.ISIAPIOutputLegs(outputset.OutputLegs)

        for intLeg in range(0, MAX_LEG_COUNT):
            outputLegDispatchObj = outputLegs.Item(intLeg)
            if (outputLegDispatchObj is None):
                continue
            
            outputLeg = SIAPIComPy.ISIAPIOutputLeg(outputLegDispatchObj)
            print("{0} Leg Deg Satn = {1:0.3f} v/c".format(LegDirections(intLeg).name, outputLeg.Deg_satn))

            outputLanes = SIAPIComPy.ISIAPIOutputLanes(outputLeg.OutputLanes)
            
            for laneno in range(1, outputLanes.Count + 1):
                outputLane = SIAPIComPy.ISIAPIOutputLane(outputLanes.Item(laneno))
                print("Lane {0}, Demand Flows Total:{1:0.0f} veh/h, HV:{2:0.1f}%, Capacity:{3:0.0f} veh/h, Deg. Satn:{4:0.3f} v/c".format(
                    laneno, outputLane.Flow_total, outputLane.Flow_HV_pct, outputLane.Capacity, outputLane.Deg_satn))

    def __PrintSiteDiagnostics(self, site):
        print("Diagnostic Status: {}".format(switcherDiagStatus.get(site.DiagnosticStatus)));
        print("Site Messages:");
        for msgIndex in range(site.DiagnosticMsgs.Count):
           print(site.DiagnosticMsgs.Item(msgIndex).Message);

    def Test(self):
        try:
            self.siapi.OpenProject("Test.sip9")
            project = SIAPIComPy.ISIAPIProject(self.siapi.Project)
            print("Project Name: '{}'".format(project.Name))
            
            siteFolders = SIAPIComPy.ISIAPISiteFolders(project.SiteFolders);
            siteFolder =  SIAPIComPy.ISIAPISiteFolder(siteFolders.Item_2(0))

            sites = SIAPIComPy.ISIAPISites(siteFolder.Sites)
            print("sites.Count = {}".format(sites.Count))

            for siteIndex in range(sites.Count):
                site = SIAPIComPy.ISIAPISite(sites.Item_2(siteIndex))
                print("Site Name: '{}'".format(site.Name))

                mcs = SIAPIComPy.ISIAPIMovementClasses(site.MovementClasses)

                for mcIndex in range(1, mcs.Count + 1):
                    mc = SIAPIComPy.ISIAPIMovementClass(mcs.Item(mcIndex))
                    print("Mov Class: '{}'".format(mc.Name))

                print()

                if site.Outputset is None:
                    print("Processing Site...")
                    if not (site.Process()) :
                        self.__PrintSiteDiagnostics(site)

                if not (site.Outputset is None):
                    outputset = SIAPIComPy.ISIAPIOutputset(site.Outputset)
                    print(outputset.Generated.strftime("Outputset is generated at %d-%m-%Y %H:%M:%S."))

                    #self.__ReadIntersectionOutput(site, outputset)
                    self.__ReadMovementOutput(site, outputset)
                    #self.__ReadLaneOutput(site, outputset)
                    #self.__PrintSiteDiagnostics(site)

                print()
        except Exception as ex:
            print("\nError:")
            print(ex)
        finally:
            try:
                self.siapi.Close()
                print("\nClosed siapi")
            except:
                pass

    def Finish(self):
        del self.siapi
        pythoncom.CoUninitialize()
        print("\nUninitialized the COM libraries.")
        
pySIAPI = PySIAPI()
try:
    pySIAPI.Test()
except Exception as ex:
    print("\nError:")
    print(ex)
finally:
    pySIAPI.Finish()
